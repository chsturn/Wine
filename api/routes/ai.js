const express = require('express');
const router = express.Router();
const multer = require('multer');
const auth = require('../middleware/auth');

// Configure multer for in-memory storage, as we are not saving the file.
const upload = multer({ storage: multer.memoryStorage() });

// @route   POST api/ai/analyze-label
// @desc    Accepts an image and returns a mock AI analysis
// @access  Private
router.post(
  '/analyze-label',
  auth,
  upload.single('labelImage'), // 'labelImage' must match the name attribute in the frontend form
  (req, res) => {
    // Check if a file was uploaded by multer
    if (!req.file) {
      return res.status(400).json({ msg: 'No image file uploaded.' });
    }

    // --- MOCK AI RESPONSE ---
    // In a real application, you would send req.file.buffer to an AI service here.
    // For now, we just return a hardcoded JSON object.

    const mockAIResponse = {
      name: 'Mock AI Wine',
      year: 2023,
      winery: 'ChÃ¢teau de Mock',
      region: 'Faketown, France',
      grapeVariety: 'Cabernet Mockignon',
      aroma: ['blackberry', 'cedar', 'mock-spice'],
      taste: ['full-bodied', 'dry', 'hints of mockolate'],
      foodPairing: ['grilled steak', 'roast lamb', 'hard cheeses'],
      alcoholPercentage: 14.5,
      description: 'A beautifully mocked wine with a complex character, generated by a placeholder AI.',
      price: 50,
      oakAging: {
        oakType: 'French Mock',
        durationMonths: 18
      }
    };

    // Simulate a delay as if an AI was processing the image
    setTimeout(() => {
        res.json(mockAIResponse);
    }, 1500);
  }
);

module.exports = router;
